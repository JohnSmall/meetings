-content_for :title do
  Api Documentation
-content_for :content do
  %article
    %h1 Api:V1: documentation
    %section.row
      .col-md-10.center-block
        %h3 Swagger docs
        %p 
          The Swagger 2.0 api docs are at 
          =link_to 'Swagger docs',swagger_docs_path,target: '_blank'
        %p 
          However there's a problem with the swagger docs. I'm following the JSON-API spec 
          =link_to 'JSON-API','http://jsonapi.org/'
          and the JSON formats generated by the Swagger blocks gem I'm using don't translate the schemas for the classes into the correct JSON-API format.
          So you should read that as a guide to the attributes on each class, not the way the JSON comes out or should go in.
        %h3 Client libraries
        %p 
          There are many libraries to help you use apis written to the JSON-API spec. 
          For example for React use 
          =link_to 'React Redux','https://github.com/dixieio/redux-json-api'
          For Python see 
          =link_to 'JSON-API implementations','http://jsonapi.org/implementations/'
          There seem to be plenty of Python server side libraries for JSON-API but no client side libraries. |
          So unfortunately if you're using Python, the client requests will have to be hand coded.
        %h3 Postman
        %p 
          To view and play around with the API use the Postman Chrome plugin or standalone application. |
          You'll have to set the 'Content-Type=application/vnd.api+json'. The React Redux library for JSON-API comes with its own data viewer
        %h3 Documentation Structure
        %p
          I've added a lot of stuff about the underlying data structure before getting to the actual calls made to the API because it's useful to
          be able to understand how the different object relate to each other. The procedures to add objects via the API is down at the end
    %section.row
      .col-md-10.center-block
        %h2 The data model
        %p The underlying data model is very simple we have
        %ol
          %li People
          %li Organisations
          %li Government departments (offices of state)
          %li Meetings
          %li Hospitality
          %li Gifts
          %li Travel
        %p
          All those things can be represented in a three table model using single table inheritance, you can read up on the concept here 
          =link_to('Wikipedia on Single Table Inheritance','https://en.wikipedia.org/wiki/Single_Table_Inheritance')
          and
          =link_to('Martin Fowler on Single Table Inheritance','http://www.martinfowler.com/eaaCatalog/singleTableInheritance.html')
          and
          =link_to('Single Table Inheritance in Rails','http://api.rubyonrails.org/classes/ActiveRecord/Inheritance.html')
        %p
          The basic three tables are just these;-
        %h5 The entities table. This holds people, government offices, and organisations
        %pre
          :preserve
            CREATE TABLE entities (
              id integer NOT NULL,
              name character varying,
              wikipedia_entry character varying,
              type character varying,
              created_at timestamp without time zone NOT NULL,
              updated_at timestamp without time zone NOT NULL
            );


        %h5 The means_of_influence table.
        %p A strange name I know. It's a name that encompasses all the means of influence;- meetings, hospitality, gifts and travel
        %pre
          :preserve
            CREATE TABLE means_of_influences (
              id integer NOT NULL,
                type character varying,
                day integer,
                month integer,
                year integer,
                purpose character varying,
                type_of_hospitality character varying,
                gift character varying,
                value integer,
                created_at timestamp without time zone NOT NULL,
                updated_at timestamp without time zone NOT NULL
            );

        %h5 The influences_office_people table. 
        %p 
          This links the means_of_influences table to the entities table so we can have a records that |
          links a meeting with the government people, their offices, the organisation(s) they're meeting, and the people in those organisations
        %pre
          :preserve
            CREATE TABLE influence_office_people (
              id integer NOT NULL,
                means_of_influence_id integer,
                office_id integer,
                person_id integer,
                created_at timestamp without time zone NOT NULL,
                updated_at timestamp without time zone NOT NULL,
                type character varying
            );
    %section
      %h3 The relationships
      %p 
        What makes the three table system work for recording the complex relationships that exist between people, |
        their government offices, organisations, meetings, gifts etc are the relationships between the classes (called models in Rails).
      %p For example the Person class is a type of entity expressed in this code
      %pre
        :preserve
          ##
          # This class represents a person, who can be a government person or an outside organisation person depending on the meeting/hospitality & etc
          class Person < Entity
            include Swagger::Blocks
            ##
            # has_many :influence_office_people links to the intermediate table 
            # between people and meetings/hospitality/gifts/etc
            has_many :influence_office_people,foreign_key: 'person_id'
            has_many :meetings,through: :influence_office_people
            has_many :hospitalities,through: :influence_office_people
            has_many :gifts,through: :influence_office_people
            has_many :travels,through: :influence_office_people
      %p
        This code is saying that a Person is a subclass of Entity, and a person can have many influence_office_people (the intermediate table) |
        and they can have many meetings, hospitalities, gifts and travels through the intermediate table. |
        It doesn't say whether the person is a government official or an person from an organisation because the same person can be a government official and at a later time |
        a representative of an organisation. Whether they're a government official or a person representing an organisation is defined by their role in the meeting/hospitality/etc |
        That comes in the intermediate table
      %pre
        :preserve
          class InfluenceOfficePerson < ApplicationRecord
            def self.types
              %w(InfluenceGovernmentOfficePerson InfluenceOrganisationPerson)
            end
            self.types.each do |klass|
              scope klass.underscore.downcase.pluralize.to_sym,->{where(type: klass)}
            end
            validates :means_of_influence_id,presence: true
            belongs_to :meeting, foreign_key: 'means_of_influence_id' 
            belongs_to :hospitality, foreign_key: 'means_of_influence_id'
            belongs_to :gift, foreign_key: 'means_of_influence_id'
            belongs_to :travel, foreign_key: 'means_of_influence_id'
          end

          class InfluenceGovernmentOfficePerson < InfluenceOfficePerson
            belongs_to :government_office, foreign_key: 'office_id'
            belongs_to :government_person, class_name: 'Person', foreign_key: 'person_id'
          end

          class InfluenceOrganisationPerson < InfluenceOfficePerson
            belongs_to :organisation,foreign_key: 'office_id'
            belongs_to :organisation_person,class_name: 'Person',foreign_key: 'person_id'
          end
      %p
        This is saying that the superclass InfluenceOfficePerson can have two subclasses, InfluenceGovernmentOfficePerson, and InfluenceOrganisationPerson
        All classes belong_to one of meeting, hospitality,gift or travel. Then at the subclass level we have additional relationships in InfluenceGovernmentOfficePerson
        which belongs to a government_office and a government_person and InfluenceOrganisationPerson which belongs to an organisation and an organisation_person

      %p The next part in the chain is the MeansOfInfluence
      %pre
        :preserve
          class MeansOfInfluence < ApplicationRecord
            def self.types
              %w(Meeting Hospitality Gift Travel)
            end
            validates :month,:year,presence: true
            has_many :influence_government_office_people
            has_many :influence_organisation_people
            has_many :organisations,through: :influence_organisation_people
            has_many :organisation_people,through: :influence_organisation_people,class_name: 'Person'
            has_many :government_people,through: :influence_government_office_people,class_name: 'Person'
            has_many :government_offices,through: :influence_government_office_people

            self.types.each do |klass|
              scope klass.underscore.downcase.pluralize.to_sym,->{where(type: klass)}
            end
          end

          class Meeting < MeansOfInfluence
            validates :purpose,presence:true
          end
      %p
        This shows the superclass MeansOfInfluence, it defines the relationships at the superclass level, and then at the subclass level, Meeting defines just one |
        additional behaviour, it validates the presence of 'purpose' because each meeting must have a purpose. |
      %p later on I'll be adding the documentation for all the other classes, but now let's move on to see how you use the JSON-API to add data about a meeting


    %section
      %h3 Using the API.
      %p 
        I'll walk through an example using the API to create the entries required for a meeting between one government person and one organisation. We need to create
        these records and then link them together
      %ol
        %li A person record
        %li A government office record
        %li An organisation record
        %li A meeting record
      %p
        We then link them by creating 
      %ol
        %li An InfluenceGovernmentOfficePerson record
        %li An InfluenceOrganisationPerson record
      %p
        Following the JSON-API spec we have to set the headers to be 'Content-Type=application/vnd.api+json',then we POST to create a person record
      %pre
        :preserve
          POST /api/v1/people HTTP/1.1
          Host: localhost:3000
          Content-Type: application/vnd.api+json
          Cache-Control: no-cache
          { "data": 
            { "type": "people", 
              "attributes": { 
                "name": "some name", 
                "wikipedia-entry": "an entry" 
                } 
              } 
            }
      %p
        That will return a JSON-API package looking like this
      %pre
        :preserve
          {
            "data":{
            "id":"175",
            "type":"people",
            "links":{
              "self":"http://localhost:3000/api/v1/people/175"
              },
              "attributes":{
                "name":"some name","wikipedia-entry":"an entry"
                },
                "relationships":{
                  "meetings":{
                    "links":{
                      "self":"http://localhost:3000/api/v1/people/175/relationships/meetings","related":"http://localhost:3000/api/v1/people/175/meetings"
                    }
                  }
                }
            }
          }
      %p 
        You then have to to create the government office, you replace the 
      %pre  
        "type": "people" 
      %p 
        with
      %pre
        "type": "government-offices"
      %p
        We then create a meeting record
      %pre
        :preserve
          {
            "data" :  {
              "type" :  "meetings",
              "attributes" :  {
                "purpose" :  "A test meeting",
                "year" : '2016',
                "month" : '3'
              }
            }
          }
      %p
        This will return a json-api record, with the id of the meeeting, we can now create the relationship between the meeting and the person,government office and organisation

